#include <avr/pgmspace.h>  // Needed to store stuff in Flash using PROGMEM
#include "FastLED.h"       // Fastled library to control the LEDs

#define NUM_LEDS 1024      // 32x32 board 
#define DATA_PIN 2         // must match the data outpin number you're using on your Arduino board

CRGBArray<NUM_LEDS> leds;

const int grid[32][32] PROGMEM = {
  { 1024,1023,1022,1021,1020,1019,1018,1017,1016,1015,1014,1013,1012,1011,1010,1009,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1, },
  { 993,994,995,996,997,998,999,1000,1001,1002,1003,1004,1005,1006,1007,1008,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32, },
  { 992,991,990,989,988,987,986,985,984,983,982,981,980,979,978,977,48,47,46,45,44,43,42,41,40,39,38,37,36,35,34,33, },
  { 961,962,963,964,965,966,967,968,969,970,971,972,973,974,975,976,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64, },
  { 960,959,958,957,956,955,954,953,952,951,950,949,948,947,946,945,80,79,78,77,76,75,74,73,72,71,70,69,68,67,66,65, },
  { 929,930,931,932,933,934,935,936,937,938,939,940,941,942,943,944,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96, },
  { 928,927,926,925,924,923,922,921,920,919,918,917,916,915,914,913,112,111,110,109,108,107,106,105,104,103,102,101,100,99,98,97, },
  { 897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128, },
  { 896,895,894,893,892,891,890,889,888,887,886,885,884,883,882,881,144,143,142,141,140,139,138,137,136,135,134,133,132,131,130,129, },
  { 865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160, },
  { 864,863,862,861,860,859,858,857,856,855,854,853,852,851,850,849,176,175,174,173,172,171,170,169,168,167,166,165,164,163,162,161, },
  { 833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192, },
  { 832,831,830,829,828,827,826,825,824,823,822,821,820,819,818,817,208,207,206,205,204,203,202,201,200,199,198,197,196,195,194,193, },
  { 801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224, },
  { 800,799,798,797,796,795,794,793,792,791,790,789,788,787,786,785,240,239,238,237,236,235,234,233,232,231,230,229,228,227,226,225, },
  { 769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256, },
  { 768,767,766,765,764,763,762,761,760,759,758,757,756,755,754,753,272,271,270,269,268,267,266,265,264,263,262,261,260,259,258,257, },
  { 737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288, },
  { 736,735,734,733,732,731,730,729,728,727,726,725,724,723,722,721,304,303,302,301,300,299,298,297,296,295,294,293,292,291,290,289, },
  { 705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320, },
  { 704,703,702,701,700,699,698,697,696,695,694,693,692,691,690,689,336,335,334,333,332,331,330,329,328,327,326,325,324,323,322,321, },
  { 673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352, },
  { 672,671,670,669,668,667,666,665,664,663,662,661,660,659,658,657,368,367,366,365,364,363,362,361,360,359,358,357,356,355,354,353, },
  { 641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384, },
  { 640,639,638,637,636,635,634,633,632,631,630,629,628,627,626,625,400,399,398,397,396,395,394,393,392,391,390,389,388,387,386,385, },
  { 609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416, },
  { 608,607,606,605,604,603,602,601,600,599,598,597,596,595,594,593,432,431,430,429,428,427,426,425,424,423,422,421,420,419,418,417, },
  { 577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448, },
  { 576,575,574,573,572,571,570,569,568,567,566,565,564,563,562,561,464,463,462,461,460,459,458,457,456,455,454,453,452,451,450,449, },
  { 545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480, },
  { 544,543,542,541,540,539,538,537,536,535,534,533,532,531,530,529,496,495,494,493,492,491,490,489,488,487,486,485,484,483,482,481, },
  { 513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512, },
};

const long Qbert[] PROGMEM = 
{ // 3 x 6
  0xFFFFFF, 0x000000, 0x000000,  
  0xFFFFFF, 0x000000, 0x000000,  
  0xFFFFFF, 0x000000, 0x000000,  
  0xFFFFFF, 0x000000, 0x000000,   
  0xFFFFFF, 0x000000, 0x000000,  
  0xFFFFFF, 0xFFFFFF, 0xFFFFFF,    
};

const long Arlo[] PROGMEM = 
{ // 12x5
  1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0,
  1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0,
  1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1,
  1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1,
  1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1,
};

const long ProcoreLogo[] PROGMEM =  // 16x16 image 
{
  // Procore logo
  0xf4f5f6, 0xf4f5f6, 0x8d8e8e, 0x7c7e7f, 0x7c7e7f, 0x7c7e7f, 0x7c7e7f, 0x7c7e7f, 0x7c7e7f, 0x7c7e7f, 0x7c7e7f, 0x7c7e7f, 0x7c7e7f, 0x8d8e8e, 0xf4f5f6, 0xf4f5f6, 
  0xf4f5f6, 0x595d61, 0x161d26, 0x111821, 0x111821, 0x111821, 0x111821, 0x111821, 0x111821, 0x111821, 0x111821, 0x111821, 0x111821, 0x161d26, 0x595d61, 0xf4f5f6, 
  0x66686b, 0x121922, 0x111821, 0x111821, 0x111821, 0x111821, 0x111821, 0x111821, 0x111821, 0x111821, 0x111821, 0x111821, 0x111821, 0x111821, 0x121922, 0x66686b, 
  0x191f28, 0x111821, 0x111821, 0x111821, 0x111821, 0x41454c, 0x4f5357, 0x4f5357, 0x4f5357, 0x4f5357, 0x41454c, 0x111821, 0x111821, 0x111821, 0x111821, 0x191f28, 
  0x111821, 0x111821, 0x111821, 0x111821, 0x252a32, 0x949494, 0xf4f5f6, 0xf4f5f6, 0xf4f5f6, 0xf4f5f6, 0x949494, 0x252a32, 0x111821, 0x111821, 0x111821, 0x111821, 
  0x111821, 0x111821, 0x111821, 0x121922, 0x78797b, 0xf4f5f6, 0xac897d, 0xc07c67, 0xc07c67, 0xac897d, 0xf4f5f6, 0x78797b, 0x121922, 0x111821, 0x111821, 0x111821, 
  0x8c8d8d, 0x8c8d8d, 0x8c8d8d, 0x8c8d8d, 0xf4f5f6, 0x9a9492, 0xf4561a, 0xfc5100, 0xfc5100, 0xf4561a, 0x9a9492, 0xf4f5f6, 0x383d44, 0x111821, 0x111821, 0x111821,
  0x111821, 0x111821, 0x111821, 0x383d44, 0xf4f5f6, 0x9a9492, 0xf4561a, 0xfc5100, 0xfc5100, 0xf4561a, 0x9a9492, 0xf4f5f6, 0x8c8d8d, 0x8c8d8d, 0x8c8d8d, 0x8c8d8d, 
  0xf4f5f6, 0xf4f5f6, 0xf4f5f6, 0xf4f5f6, 0xf4f5f6, 0xcf7356, 0xfc5100, 0xfc5100, 0xfc5100, 0xfc5100, 0xcf7356, 0xf4f5f6, 0x89898a, 0x151b24, 0x111821, 0x111821, 
  0x111821, 0x111821, 0x151b24, 0x89898a, 0xf4f5f6, 0xcf7356, 0xfc5100, 0xfc5100, 0xfc5100, 0xfc5100, 0xcf7356, 0xf4f5f6, 0xf4f5f6, 0xf4f5f6, 0xf4f5f6, 0xf4f5f6,
  0x111821, 0x111821, 0x111821, 0x121922, 0x78797b, 0xf4f5f6, 0xac897d, 0xc07c67, 0xc07c67, 0xac897d, 0xf4f5f6, 0x78797b, 0x121922, 0x111821, 0x111821, 0x111821,
  0x111821, 0x111821, 0x111821, 0x111821, 0x252a32, 0x949494, 0xf4f5f6, 0xf4f5f6, 0xf4f5f6, 0xf4f5f6, 0x949494, 0x252a32, 0x111821, 0x111821, 0x111821, 0x111821, 
  0x191f28, 0x111821, 0x111821, 0x111821, 0x111821, 0x41454c, 0x4f5357, 0x4f5357, 0x4f5357, 0x4f5357, 0x41454c, 0x111821, 0x111821, 0x111821, 0x111821, 0x191f28, 
  0x66686b, 0x121922, 0x111821, 0x111821, 0x111821, 0x111821, 0x111821, 0x111821, 0x111821, 0x111821, 0x111821, 0x111821, 0x111821, 0x111821, 0x121922, 0x66686b, 
  0xf4f5f6, 0x595d61, 0x161d26, 0x111821, 0x111821, 0x111821, 0x111821, 0x111821, 0x111821, 0x111821, 0x111821, 0x111821, 0x111821, 0x161d26, 0x595d61, 0xf4f5f6, 
  0xf4f5f6, 0xf4f5f6, 0x8d8e8e, 0x7c7e7f, 0x7c7e7f, 0x7c7e7f, 0x7c7e7f, 0x7c7e7f, 0x7c7e7f, 0x7c7e7f, 0x7c7e7f, 0x7c7e7f, 0x7c7e7f, 0x8d8e8e, 0xf4f5f6, 0xf4f5f6, 

  // Qbert
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
  0x000000, 0x000000, 0x000000, 0x000000, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff6600, 0xff6600, 0xff6600, 0x000000, 0x000000, 
  0x000000, 0xff0033, 0xff0033, 0xff6600, 0xff0033, 0xffffcc, 0xffffcc, 0xff0033, 0xffffcc, 0xffffcc, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xff0033, 0x000000, 0x000000, 0xff0033, 0xff6600, 0xff6600, 0xff0033, 0xff0033, 
  0xff0033, 0xff0033, 0xff0033, 0xff6600, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff6600, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
  0x000000, 0x000000, 0x000000, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff0033, 0xff0033, 0xff6600, 0xff6600, 0xff6600, 0xff0033, 0xff0033,  
  0xff0033, 0xff0033, 0xff0033, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0x000000, 0x000000, 
  0x000000, 0xff6600, 0xff6600, 0xff6600, 0xff0033, 0xff0033, 0xff0033, 0xff6600, 0xff0033, 0xff6600, 0xff0033, 0xff6600, 0xff0033, 0xff6600, 0xff0033, 0xff0033, 
  0x000000, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff6600, 0xff0033, 0xff0033, 0x000000, 0xff0033, 0xff0033, 0x000033, 0x000033, 0xff6600, 0x000000, 
  0x000000, 0xff0033, 0x000033, 0x000033, 0xff0033, 0x000000, 0x000000, 0x000000, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0x000000, 0x000000, 
  0x000000, 0x000000, 0x000000, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0x000000, 0x000000, 0x000000, 0x000000, 0xff0033, 0xff0033, 0x000000, 0x000000, 
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xff0033, 0x000000, 0x000000, 0xff0033, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0xff6600, 0xff6600, 0xff6600, 0x000000, 0x000000, 0xff0033, 0xff6600, 0xff6600, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
  0x000000, 0x000000, 0x000000, 0x000000, 0xff6600, 0xff6600, 0xff0033, 0x000000, 0x000000, 0xff6600, 0xff6600, 0xff6600, 0xff0033, 0x000000, 0x000000, 0x000000,

  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
  0x000000, 0x000000, 0x000000, 0x000000, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff6600, 0xff6600, 0xff6600, 0x000000, 0x000000, 
  0x000000, 0xff0033, 0xff0033, 0xff6600, 0xff0033, 0xffffcc, 0xffffcc, 0xff0033, 0xffffcc, 0xffffcc, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xff0033, 0x000000, 0x000000, 0xff0033, 0xff6600, 0xff6600, 0xff0033, 0xff0033, 
  0xff0033, 0xff0033, 0xff0033, 0xff6600, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff6600, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
  0x000000, 0x000000, 0x000000, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff0033, 0xff0033, 0xff6600, 0xff6600, 0xff6600, 0xff0033, 0xff0033,  
  0xff0033, 0xff0033, 0xff0033, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0x000000, 0x000000, 
  0x000000, 0xff6600, 0xff6600, 0xff6600, 0xff0033, 0xff0033, 0xff0033, 0xff6600, 0xff0033, 0xff6600, 0xff0033, 0xff6600, 0xff0033, 0xff6600, 0xff0033, 0xff0033, 
  0x000000, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff6600, 0xff0033, 0xff0033, 0x000000, 0xff0033, 0xff0033, 0x000033, 0x000033, 0xff6600, 0x000000, 
  0x000000, 0xff0033, 0x000033, 0x000033, 0xff0033, 0x000000, 0x000000, 0x000000, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0x000000, 0x000000, 
  0x000000, 0x000000, 0x000000, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0x000000, 0x000000, 0x000000, 0x000000, 0xff0033, 0xff0033, 0x000000, 0x000000, 
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xff0033, 0x000000, 0x000000, 0xff0033, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0xff6600, 0xff6600, 0xff6600, 0x000000, 0x000000, 0xff0033, 0xff6600, 0xff6600, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
  0x000000, 0x000000, 0x000000, 0x000000, 0xff6600, 0xff6600, 0xff0033, 0x000000, 0x000000, 0xff6600, 0xff6600, 0xff6600, 0xff0033, 0x000000, 0x000000, 0x000000,

  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
  0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
  0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0xff0033, 0xff0033, 0xff0033, 0xff6600, 0xff6600, 0xff6600, 0x000000, 0x000000, 
  0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0xffffcc, 0xffffcc, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
  0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0xff0033, 0x000000, 0x000000, 0xff0033, 0xff6600, 0xff6600, 0xff0033, 0xff0033, 
  0xff0033, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0xff0033, 0xff0033, 0xff6600, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
  0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0xff6600, 0xff0033, 0xff0033, 0xff6600, 0xff6600, 0xff6600, 0xff0033, 0xff0033,  
  0xff0033, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0x000000, 0x000000, 
  0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0xff0033, 0xff6600, 0xff0033, 0xff6600, 0xff0033, 0xff6600, 0xff0033, 0xff0033, 
  0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0xff0033, 0x000000, 0xff0033, 0xff0033, 0x000033, 0x000033, 0xff6600, 0x000000, 
  0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0x000000, 0x000000, 
  0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xff0033, 0xff0033, 0x000000, 0x000000, 
  0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xff0033, 0x000000, 0x000000, 0xff0033, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xff6600, 0xff6600, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xff6600, 0xff6600, 0xff6600, 0xff0033, 0x000000, 0x000000, 0x000000,

  // // mostly pink block
  // 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 
  // 0x000000, 0x000000, 0x000000, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 
  // 0x000000, 0x000000, 0x000000, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 
  // 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 
  // 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 
  // 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 
  // 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 
  // 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 
  // 0xff0033, 0xff0033, 0xff0033, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0x000000, 0x000000, 
  // 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 
  // 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 
  // 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 
  // 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 
  // 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 
  // 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 
  // 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033,

  // // mostly blue block
  // 0x000000, 0x000000, 0x000000, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 
  // 0x000000, 0x000000, 0x000000, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 
  // 0x000000, 0x000000, 0x000000, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 
  // 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 
  // 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 
  // 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 
  // 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 
  // 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 
  // 0x0000FF, 0x0000FF, 0x0000FF, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0x000000, 0x000000, 
  // 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 
  // 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 
  // 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 
  // 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 
  // 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 
  // 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 
  // 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF,
};

// void renderImage(long image[]) {
//   FastLED.clear();
//   // quadrants 1 and 2 (northeast and southeast)
//   for(int i = 0; i < 512; i++) {
//     leds[i] = pgm_read_dword(&(image[i]));  // read array from Flash
//   }

//   // quadrant 3 (southwest)
//   for(int i = 512; i <= 527; i++) {
//     leds[i] = pgm_read_dword(&(image[i + 240]));
//   }  
//   for(int i = 528; i <= 543; i++) {
//     leds[i] = pgm_read_dword(&(image[i + 208]));
//   }
//   for(int i = 544; i <= 559; i++) {
//     leds[i] = pgm_read_dword(&(image[i + 176]));
//   }  
//   for(int i = 560; i <= 575; i++) {
//     leds[i] = pgm_read_dword(&(image[i + 144]));
//   }
//   for(int i = 576; i <= 591; i++) {
//     leds[i] = pgm_read_dword(&(image[i + 112]));
//   }  
//   for(int i = 592; i <= 607; i++) {
//     leds[i] = pgm_read_dword(&(image[i + 80]));
//   }  
//   for(int i = 608; i <= 623; i++) {
//     leds[i] = pgm_read_dword(&(image[i + 48]));
//   }  
//   for(int i = 624; i <= 639; i++) {
//     leds[i] = pgm_read_dword(&(image[i + 16]));
//   }  
//   for(int i = 640; i <= 655; i++) {
//     leds[i] = pgm_read_dword(&(image[i - 16]));
//   }  
//   for(int i = 656; i <= 671; i++) {
//     leds[i] = pgm_read_dword(&(image[i - 48]));
//   }  
//   for(int i = 672; i <= 687; i++) {
//     leds[i] = pgm_read_dword(&(image[i - 80]));
//   }  
//   for(int i = 688; i <= 703; i++) {
//     leds[i] = pgm_read_dword(&(image[i - 112]));
//   }  
//   for(int i = 704; i <= 719; i++) {
//     leds[i] = pgm_read_dword(&(image[i - 144]));
//   }  
//   for(int i = 720; i <= 735; i++) {
//     leds[i] = pgm_read_dword(&(image[i - 176]));
//   }  
//   for(int i = 736; i <= 751; i++) {
//     leds[i] = pgm_read_dword(&(image[i - 208]));
//   }  
//   for(int i = 752; i <= 767; i++) {
//     leds[i] = pgm_read_dword(&(image[i - 240]));
//   }  

//   // quadrant 4 (northwest)
//   for(int i = 768; i <= 783; i++) {
//     leds[i] = pgm_read_dword(&(image[i + 240]));
//   }  
//   for(int i = 784; i <= 799; i++) {
//     leds[i] = pgm_read_dword(&(image[i + 208]));
//   }
//   for(int i = 800; i <= 815; i++) {
//     leds[i] = pgm_read_dword(&(image[i + 176]));
//   }  
//   for(int i = 816; i <= 831; i++) {
//     leds[i] = pgm_read_dword(&(image[i + 144]));
//   }
//   for(int i = 832; i <= 847; i++) {
//     leds[i] = pgm_read_dword(&(image[i + 112]));
//   }  
//   for(int i = 848; i <= 863; i++) {
//     leds[i] = pgm_read_dword(&(image[i + 80]));
//   }  
//   for(int i = 864; i <= 879; i++) {
//     leds[i] = pgm_read_dword(&(image[i + 48]));
//   }  
//   for(int i = 880; i <= 895; i++) {
//     leds[i] = pgm_read_dword(&(image[i + 16]));
//   }  
//   for(int i = 896; i <= 911; i++) {
//     leds[i] = pgm_read_dword(&(image[i - 16]));
//   }  
//   for(int i = 912; i <= 927; i++) {
//     leds[i] = pgm_read_dword(&(image[i - 48]));
//   }  
//   for(int i = 928; i <= 943; i++) {
//     leds[i] = pgm_read_dword(&(image[i - 80]));
//   }  
//   for(int i = 944; i <= 959; i++) {
//     leds[i] = pgm_read_dword(&(image[i - 112]));
//   }  
//   for(int i = 960; i <= 975; i++) {
//     leds[i] = pgm_read_dword(&(image[i - 144]));
//   }  
//   for(int i = 976; i <= 991; i++) {
//     leds[i] = pgm_read_dword(&(image[i - 176]));
//   }  
//   for(int i = 992; i <= 1007; i++) {
//     leds[i] = pgm_read_dword(&(image[i - 208]));
//   }  
//   for(int i = 1008; i <= 1023; i++) {
//     leds[i] = pgm_read_dword(&(image[i - 240]));
//   }

//   FastLED.show();
// }

void renderImage(long image[], int x, int y, int width, int height) {
  for (int i=x; i<x+width; i++) {
    for (int j=y; j<y+height; j++) {
      int leds_index = pgm_read_dword(&grid[j][i]) - 1;
      int image_index = (i-x) + (j-y) * width;
      leds[leds_index] = pgm_read_dword(&(image[image_index])) ? 0xFF0000 : 0x000000;
    }
  }
  FastLED.show();
  delay(200);

  for (int i=x; i<x+width; i++) {
    for (int j=y; j<y+height; j++) {
      int leds_index = pgm_read_dword(&grid[j][i]) - 1;
      int image_index = (i-x) + (j-y) * width;
      leds[leds_index] = CRGB::Black;
    }
  }  
}

void setup() { 
  Serial.begin(9600);
  FastLED.addLeds<NEOPIXEL,DATA_PIN>(leds, NUM_LEDS);  // initializes the FastLED library
  FastLED.setBrightness(10);
  FastLED.clear();
}

int X = 0;
int Y = 3;
int X_offset = 1;
int Y_offset = 1;
int image_width = 12;
int image_height = 5;

void loop() { 
  renderImage(Arlo, X, Y, image_width, image_height);
  if (X + X_offset > 32 - image_width || X + X_offset < 0) {
    X_offset = -X_offset;
  }
  X += X_offset;

  if (Y + Y_offset > 32 - image_height || Y + Y_offset < 0) {
    Y_offset = -Y_offset;
  }
  Y += Y_offset;
}
